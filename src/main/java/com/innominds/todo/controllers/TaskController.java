package com.innominds.todo.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.innominds.todo.dto.ResponseContainer;
import com.innominds.todo.dto.TaskPaginationDTO;
import com.innominds.todo.entity.Task;
import com.innominds.todo.exception.TodoException;
import com.innominds.todo.services.TodoCRUDService;
import com.innominds.todo.services.TodoQueryService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

@Tag(name = "Todo Task Controller", description = "Todo Api for managing tasks")
@RestController
@RequestMapping("/todo")
public class TaskController {

	@Autowired
	TodoCRUDService todoCrudService;
	@Autowired
	TodoQueryService todoQueryService;

	Logger logger = LoggerFactory.getLogger(TaskController.class);

	@PostMapping()
	@Operation(summary = "create Task for the given user id", description = "Create task for the given user id. The response is Task with autogenerated id, title, description, status.", tags = {
			"Todo", "get" })
	/*
	 * @ApiResponses({
	 * 
	 * @ApiResponse(responseCode = "200", content = { @Content(schema
	 * = @Schema(implementation = Task.class), mediaType = "application/json") }),
	 * 
	 * @ApiResponse(responseCode = "404", content = { @Content(schema = @Schema())
	 * }),
	 * 
	 * @ApiResponse(responseCode = "500", content = { @Content(schema = @Schema())
	 * }) })
	 */
	public ResponseEntity<ResponseContainer<Task>> createTask(@RequestBody Task task) throws TodoException {
		logger.info("in create task controller");
		Task createdTask = todoCrudService.createTask(task);
		logger.info("task successfully created with id: {}", task.getId());
		ResponseContainer<Task> response = new ResponseContainer<>(createdTask);
		return new ResponseEntity<>(response, HttpStatus.CREATED);
	}

	@PutMapping("/{id}")
	public ResponseEntity<ResponseContainer<Task>> updateTask(String id, @RequestBody Task task) throws TodoException {
		logger.info("in update task controller");
		Task updatedTask = todoCrudService.updateTask(task);
		logger.info("task successfully updated");

		ResponseContainer<Task> response = new ResponseContainer<>(updatedTask);
		return new ResponseEntity<>(response, HttpStatus.OK);
	}

	@PatchMapping("/{userId}/{taskId}")
	public ResponseEntity<ResponseContainer<Task>> updateTaskStatus(@PathVariable String userId,
			@PathVariable String taskId, @RequestBody Task task) throws TodoException {
		logger.info("in update task status controller for user id {} , taskId {} , status", userId, taskId,
				task.getStatus());
		Task taskRes = todoCrudService.updateStatus(userId, taskId, task.getStatus());
		logger.info("task status updated successfully for user id {} , taskId {} , status", userId, taskId,
				task.getStatus());
		ResponseContainer<Task> response = new ResponseContainer<>(taskRes);
		return new ResponseEntity<>(response, HttpStatus.OK);
	}

	@GetMapping("/list/{userId}")
	public ResponseEntity<ResponseContainer<TaskPaginationDTO>> getListOfTasksForUserId(@PathVariable String userId,
			@RequestParam int pageNumber, @RequestParam int limitPerPage) throws TodoException {
		logger.info("in task list controller for user id {} , pageNumber {} , limitPerPage", userId, pageNumber,
				limitPerPage);
		TaskPaginationDTO res = todoQueryService.listofTasks(userId, pageNumber, limitPerPage);
		logger.info("in task list returned for user id {} , pageNumber {} , limitPerPage", userId, pageNumber,
				limitPerPage);
		ResponseContainer<TaskPaginationDTO> response = new ResponseContainer<>(res);
		return new ResponseEntity<>(response, HttpStatus.OK);

	}

	@GetMapping("/{id}")
	public ResponseEntity<ResponseContainer<Task>> getTaskDetailForId(@PathVariable String id) throws TodoException {
		logger.info("in task read controller for task id {}", id);
		Task res = todoCrudService.readTask(id);
		logger.info("in task read returned for task id {}", id);
		ResponseContainer<Task> response = new ResponseContainer<>(res);
		return new ResponseEntity<>(response, HttpStatus.OK);

	}

	@GetMapping("/{userId}/{id}")
	public ResponseEntity<ResponseContainer<Task>> getTaskDetailsForUserIdAndTaskId(@PathVariable String userId,
			@PathVariable String id) throws TodoException {

		logger.info("in task read controller for task user id and  id {}", userId, id);
		Task res = todoQueryService.taskDetailsForUserIdAndTaskId(userId, id);
		logger.info("in task read returned for task user id and  id {}", userId, id);
		ResponseContainer<Task> response = new ResponseContainer<>(res);
		return new ResponseEntity<>(response, HttpStatus.OK);

	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<ResponseContainer<String>> deleteTaskForId(@PathVariable String id) throws TodoException {
		logger.info("in task delete controller for task id {}", id);
		todoCrudService.deleteTask(id);
		logger.info("task deleted successfully for task id {}", id);
		ResponseContainer<String> response = new ResponseContainer<>("Success");
		return new ResponseEntity<>(response, HttpStatus.OK);

	}
}
